CCS PCM C Compiler, Version 5.115d, 1               06-Jun-23 12:09
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\Thijs\Desktop\project-1-4\Project1.4-Pipetteerrobot\fig_2_25.lst

               ROM used:   211 words (3%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           8 (2%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   07C
0003:  NOP
.................... #include <16F877.h>
.................... //////////// Standard Header file for the PIC16F877 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877
.................... 
.................... #list
.................... 
.................... #use delay(clock=8000000)
*
0013:  MOVLW  22
0014:  MOVWF  04
0015:  BCF    03.7
0016:  MOVF   00,W
0017:  BTFSC  03.2
0018:  GOTO   026
0019:  MOVLW  02
001A:  MOVWF  78
001B:  CLRF   77
001C:  DECFSZ 77,F
001D:  GOTO   01C
001E:  DECFSZ 78,F
001F:  GOTO   01B
0020:  MOVLW  97
0021:  MOVWF  77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  DECFSZ 00,F
0025:  GOTO   019
0026:  RETURN
.................... #fuses HS,NOWDT
.................... 
.................... void motor1R()
.................... {
.................... output_bit( PIN_B4, 0);
*
0004:  BCF    06.4
0005:  BSF    03.5
0006:  BCF    06.4
.................... output_bit( PIN_B5, 0);
0007:  BCF    03.5
0008:  BCF    06.5
0009:  BSF    03.5
000A:  BCF    06.5
.................... output_bit( PIN_B4, 1);//motor 1 Rechtsom
000B:  BCF    03.5
000C:  BSF    06.4
000D:  BSF    03.5
000E:  BCF    06.4
000F:  BCF    03.5
0010:  BCF    0A.3
0011:  BCF    0A.4
0012:  GOTO   092 (RETURN)
.................... }
.................... 
.................... void motor1uit()
.................... {
.................... output_bit( PIN_B5, 0);
*
0027:  BCF    06.5
0028:  BSF    03.5
0029:  BCF    06.5
.................... output_bit( PIN_B4, 0);// motor 1 stoppen
002A:  BCF    03.5
002B:  BCF    06.4
002C:  BSF    03.5
002D:  BCF    06.4
.................... delay_ms(3);
002E:  MOVLW  03
002F:  BCF    03.5
0030:  MOVWF  22
0031:  CALL   013
0032:  RETURN
.................... }
.................... 
.................... void motor1L()
.................... {
.................... output_bit( PIN_B4, 0);
0033:  BCF    06.4
0034:  BSF    03.5
0035:  BCF    06.4
.................... output_bit( PIN_B5, 0);
0036:  BCF    03.5
0037:  BCF    06.5
0038:  BSF    03.5
0039:  BCF    06.5
.................... output_bit( PIN_B5, 1);//motor 1 Linksom
003A:  BCF    03.5
003B:  BSF    06.5
003C:  BSF    03.5
003D:  BCF    06.5
003E:  BCF    03.5
003F:  BCF    0A.3
0040:  BCF    0A.4
0041:  GOTO   0A2 (RETURN)
.................... }
.................... 
.................... void motor2R()
.................... {
.................... output_bit( PIN_C4, 0);
0042:  BCF    07.4
0043:  BCF    20.4
0044:  MOVF   20,W
0045:  BSF    03.5
0046:  MOVWF  07
.................... output_bit( PIN_C5, 0);
0047:  BCF    03.5
0048:  BCF    07.5
0049:  BCF    20.5
004A:  MOVF   20,W
004B:  BSF    03.5
004C:  MOVWF  07
.................... output_bit( PIN_C4, 1);//motor 2 Rechtsom
004D:  BCF    03.5
004E:  BSF    07.4
004F:  BCF    20.4
0050:  MOVF   20,W
0051:  BSF    03.5
0052:  MOVWF  07
0053:  BCF    03.5
0054:  BCF    0A.3
0055:  BCF    0A.4
0056:  GOTO   0B2 (RETURN)
.................... }
.................... 
.................... void motor2uit()
.................... {
.................... output_bit( PIN_C4, 0);
0057:  BCF    07.4
0058:  BCF    20.4
0059:  MOVF   20,W
005A:  BSF    03.5
005B:  MOVWF  07
.................... output_bit( PIN_C5, 0);//motor 1 stoppen
005C:  BCF    03.5
005D:  BCF    07.5
005E:  BCF    20.5
005F:  MOVF   20,W
0060:  BSF    03.5
0061:  MOVWF  07
.................... delay_ms(3);
0062:  MOVLW  03
0063:  BCF    03.5
0064:  MOVWF  22
0065:  CALL   013
0066:  RETURN
.................... }
.................... 
.................... void motor2L()
.................... {
.................... output_bit( PIN_C4, 0);
0067:  BCF    07.4
0068:  BCF    20.4
0069:  MOVF   20,W
006A:  BSF    03.5
006B:  MOVWF  07
.................... output_bit( PIN_C5, 0);
006C:  BCF    03.5
006D:  BCF    07.5
006E:  BCF    20.5
006F:  MOVF   20,W
0070:  BSF    03.5
0071:  MOVWF  07
.................... output_bit( PIN_C5, 1);//motor 2 Linksom
0072:  BCF    03.5
0073:  BSF    07.5
0074:  BCF    20.5
0075:  MOVF   20,W
0076:  BSF    03.5
0077:  MOVWF  07
0078:  BCF    03.5
0079:  BCF    0A.3
007A:  BCF    0A.4
007B:  GOTO   0C2 (RETURN)
.................... }  
.................... 
.................... void main()
007C:  MOVF   03,W
007D:  ANDLW  1F
007E:  MOVWF  03
007F:  MOVLW  FF
0080:  MOVWF  20
0081:  BSF    03.5
0082:  BSF    1F.0
0083:  BSF    1F.1
0084:  BSF    1F.2
0085:  BCF    1F.3
0086:  BCF    03.7
.................... {
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); //timer1 enabled, instruction clock / 1
0087:  MOVLW  85
0088:  BCF    03.5
0089:  MOVWF  10
....................    setup_ccp1(CCP_COMPARE_INT);            //set CCP1 to cause an interrupt on match
008A:  MOVLW  0A
008B:  MOVWF  17
....................    enable_interrupts(INT_CCP1);            //unmask Timer2 match interrupt
008C:  BSF    03.5
008D:  BSF    0C.2
....................    enable_interrupts(global);              //enabled all unmasked interrupts
008E:  MOVLW  C0
008F:  BCF    03.5
0090:  IORWF  0B,F
....................    
....................    while(1)
....................    {
....................       motor1R ();
0091:  GOTO   004
....................       delay_ms(2000);
0092:  MOVLW  08
0093:  MOVWF  21
0094:  MOVLW  FA
0095:  MOVWF  22
0096:  CALL   013
0097:  DECFSZ 21,F
0098:  GOTO   094
....................       motor1uit();
0099:  CALL   027
....................       delay_ms(1000);     
009A:  MOVLW  04
009B:  MOVWF  21
009C:  MOVLW  FA
009D:  MOVWF  22
009E:  CALL   013
009F:  DECFSZ 21,F
00A0:  GOTO   09C
....................          
....................       motor1L ();
00A1:  GOTO   033
....................       delay_ms(2000);
00A2:  MOVLW  08
00A3:  MOVWF  21
00A4:  MOVLW  FA
00A5:  MOVWF  22
00A6:  CALL   013
00A7:  DECFSZ 21,F
00A8:  GOTO   0A4
....................       motor1uit();
00A9:  CALL   027
....................       delay_ms(1000);  
00AA:  MOVLW  04
00AB:  MOVWF  21
00AC:  MOVLW  FA
00AD:  MOVWF  22
00AE:  CALL   013
00AF:  DECFSZ 21,F
00B0:  GOTO   0AC
....................       
....................       motor2R ();
00B1:  GOTO   042
....................       delay_ms(2000);
00B2:  MOVLW  08
00B3:  MOVWF  21
00B4:  MOVLW  FA
00B5:  MOVWF  22
00B6:  CALL   013
00B7:  DECFSZ 21,F
00B8:  GOTO   0B4
....................       motor2uit();
00B9:  CALL   057
....................       delay_ms(1000);    
00BA:  MOVLW  04
00BB:  MOVWF  21
00BC:  MOVLW  FA
00BD:  MOVWF  22
00BE:  CALL   013
00BF:  DECFSZ 21,F
00C0:  GOTO   0BC
....................          
....................       motor2L ();
00C1:  GOTO   067
....................       delay_ms(2000);
00C2:  MOVLW  08
00C3:  MOVWF  21
00C4:  MOVLW  FA
00C5:  MOVWF  22
00C6:  CALL   013
00C7:  DECFSZ 21,F
00C8:  GOTO   0C4
....................       motor2uit();
00C9:  CALL   057
....................       delay_ms(1000);
00CA:  MOVLW  04
00CB:  MOVWF  21
00CC:  MOVLW  FA
00CD:  MOVWF  22
00CE:  CALL   013
00CF:  DECFSZ 21,F
00D0:  GOTO   0CC
00D1:  GOTO   091
....................    }
.................... }
00D2:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
