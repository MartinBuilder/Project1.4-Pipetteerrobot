CCS PCM C Compiler, Version 5.115d, 1               07-Jun-23 20:43
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\Thijs\Desktop\project-1-4\Project1.4-Pipetteerrobot\fig_2_25.lst

               ROM used:   176 words (2%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           8 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   062
0003:  NOP
.................... #include <16F877.h>
.................... //////////// Standard Header file for the PIC16F877 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877
.................... 
.................... #list
.................... 
.................... #use delay(clock=8000000)
*
000F:  MOVLW  22
0010:  MOVWF  04
0011:  BCF    03.7
0012:  MOVF   00,W
0013:  BTFSC  03.2
0014:  GOTO   022
0015:  MOVLW  02
0016:  MOVWF  78
0017:  CLRF   77
0018:  DECFSZ 77,F
0019:  GOTO   018
001A:  DECFSZ 78,F
001B:  GOTO   017
001C:  MOVLW  97
001D:  MOVWF  77
001E:  DECFSZ 77,F
001F:  GOTO   01E
0020:  DECFSZ 00,F
0021:  GOTO   015
0022:  RETURN
.................... #fuses HS,NOWDT
.................... 
.................... void motor1R(){
....................    output_bit( PIN_B5, 0);
*
0004:  BCF    06.5
0005:  BSF    03.5
0006:  BCF    06.5
....................    output_bit( PIN_B4, 1);//motor 1 Rechtsom
0007:  BCF    03.5
0008:  BSF    06.4
0009:  BSF    03.5
000A:  BCF    06.4
000B:  BCF    03.5
000C:  BCF    0A.3
000D:  BCF    0A.4
000E:  GOTO   06F (RETURN)
.................... }
.................... 
.................... void motor1uit(){
....................    output_bit( PIN_B5, 0);
*
0023:  BCF    06.5
0024:  BSF    03.5
0025:  BCF    06.5
....................    output_bit( PIN_B4, 0);// motor 1 stoppen
0026:  BCF    03.5
0027:  BCF    06.4
0028:  BSF    03.5
0029:  BCF    06.4
002A:  BCF    03.5
002B:  RETURN
.................... }
.................... 
.................... void motor1L(){
....................    output_bit( PIN_B4, 0);
002C:  BCF    06.4
002D:  BSF    03.5
002E:  BCF    06.4
....................    output_bit( PIN_B5, 1);//motor 1 Linksom
002F:  BCF    03.5
0030:  BSF    06.5
0031:  BSF    03.5
0032:  BCF    06.5
0033:  BCF    03.5
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   07F (RETURN)
.................... }
.................... 
.................... void motor2R(){
....................    output_bit( PIN_C5, 0);
0037:  BCF    07.5
0038:  BCF    20.5
0039:  MOVF   20,W
003A:  BSF    03.5
003B:  MOVWF  07
....................    output_bit( PIN_C4, 1);//motor 2 Rechtsom
003C:  BCF    03.5
003D:  BSF    07.4
003E:  BCF    20.4
003F:  MOVF   20,W
0040:  BSF    03.5
0041:  MOVWF  07
0042:  BCF    03.5
0043:  BCF    0A.3
0044:  BCF    0A.4
0045:  GOTO   08F (RETURN)
.................... }
.................... 
.................... void motor2uit(){
....................    output_bit( PIN_C4, 0);
0046:  BCF    07.4
0047:  BCF    20.4
0048:  MOVF   20,W
0049:  BSF    03.5
004A:  MOVWF  07
....................    output_bit( PIN_C5, 0);//motor 1 stoppen
004B:  BCF    03.5
004C:  BCF    07.5
004D:  BCF    20.5
004E:  MOVF   20,W
004F:  BSF    03.5
0050:  MOVWF  07
0051:  BCF    03.5
0052:  RETURN
.................... }
.................... 
.................... void motor2L(){
....................    output_bit( PIN_C4, 0);
0053:  BCF    07.4
0054:  BCF    20.4
0055:  MOVF   20,W
0056:  BSF    03.5
0057:  MOVWF  07
....................    output_bit( PIN_C5, 1);//motor 2 Linksom
0058:  BCF    03.5
0059:  BSF    07.5
005A:  BCF    20.5
005B:  MOVF   20,W
005C:  BSF    03.5
005D:  MOVWF  07
005E:  BCF    03.5
005F:  BCF    0A.3
0060:  BCF    0A.4
0061:  GOTO   09F (RETURN)
.................... }  
.................... 
.................... void HydrauliekAan(){
....................    output_bit( PIN_A4, 1);//hydraulish systeem aan
.................... }
.................... 
.................... void HydrauliekUit(){
....................    output_bit( PIN_A5, 0);//hydraulish systeem stoppen
.................... }
.................... 
.................... void main(){
0062:  MOVF   03,W
0063:  ANDLW  1F
0064:  MOVWF  03
0065:  MOVLW  FF
0066:  MOVWF  20
0067:  BSF    03.5
0068:  BSF    1F.0
0069:  BSF    1F.1
006A:  BSF    1F.2
006B:  BCF    1F.3
006C:  BCF    03.7
....................    while(1){
....................       motor1R ();
006D:  BCF    03.5
006E:  GOTO   004
....................       delay_ms(2000);
006F:  MOVLW  08
0070:  MOVWF  21
0071:  MOVLW  FA
0072:  MOVWF  22
0073:  CALL   00F
0074:  DECFSZ 21,F
0075:  GOTO   071
....................       motor1uit();
0076:  CALL   023
....................       delay_ms(1000);     
0077:  MOVLW  04
0078:  MOVWF  21
0079:  MOVLW  FA
007A:  MOVWF  22
007B:  CALL   00F
007C:  DECFSZ 21,F
007D:  GOTO   079
....................          
....................       motor1L ();
007E:  GOTO   02C
....................       delay_ms(2000);
007F:  MOVLW  08
0080:  MOVWF  21
0081:  MOVLW  FA
0082:  MOVWF  22
0083:  CALL   00F
0084:  DECFSZ 21,F
0085:  GOTO   081
....................       motor1uit();
0086:  CALL   023
....................       delay_ms(1000);  
0087:  MOVLW  04
0088:  MOVWF  21
0089:  MOVLW  FA
008A:  MOVWF  22
008B:  CALL   00F
008C:  DECFSZ 21,F
008D:  GOTO   089
....................       
....................       motor2R ();
008E:  GOTO   037
....................       delay_ms(2000);
008F:  MOVLW  08
0090:  MOVWF  21
0091:  MOVLW  FA
0092:  MOVWF  22
0093:  CALL   00F
0094:  DECFSZ 21,F
0095:  GOTO   091
....................       motor2uit();
0096:  CALL   046
....................       delay_ms(1000);    
0097:  MOVLW  04
0098:  MOVWF  21
0099:  MOVLW  FA
009A:  MOVWF  22
009B:  CALL   00F
009C:  DECFSZ 21,F
009D:  GOTO   099
....................          
....................       motor2L ();
009E:  GOTO   053
....................       delay_ms(2000);
009F:  MOVLW  08
00A0:  MOVWF  21
00A1:  MOVLW  FA
00A2:  MOVWF  22
00A3:  CALL   00F
00A4:  DECFSZ 21,F
00A5:  GOTO   0A1
....................       motor2uit();
00A6:  CALL   046
....................       delay_ms(1000);
00A7:  MOVLW  04
00A8:  MOVWF  21
00A9:  MOVLW  FA
00AA:  MOVWF  22
00AB:  CALL   00F
00AC:  DECFSZ 21,F
00AD:  GOTO   0A9
00AE:  GOTO   06E
....................    }
.................... }
00AF:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
