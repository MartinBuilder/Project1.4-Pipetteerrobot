CCS PCM C Compiler, Version 5.115d, 1               07-Jun-23 19:46
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\702274\Downloads\LIB_ULN2803A\ULN2803A\KiCad\Project 1.4\Code\Project1.4-Pipetteerrobot\prepping.lst

               ROM used:   161 words (2%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           18 (5%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   089
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.2
001A:  GOTO   01D
001B:  BTFSC  0C.2
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   031
.................... //prepping test programma
.................... 
.................... #include <16F877.h>
.................... //////////// Standard Header file for the PIC16F877 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877
.................... 
.................... #list
.................... 
.................... #use delay(clock=8867238)
*
006F:  MOVLW  2C
0070:  MOVWF  04
0071:  BCF    03.7
0072:  MOVF   00,W
0073:  BTFSC  03.2
0074:  GOTO   083
0075:  MOVLW  02
0076:  MOVWF  78
0077:  CLRF   77
0078:  DECFSZ 77,F
0079:  GOTO   078
007A:  DECFSZ 78,F
007B:  GOTO   077
007C:  MOVLW  DF
007D:  MOVWF  77
007E:  DECFSZ 77,F
007F:  GOTO   07E
0080:  NOP
0081:  DECFSZ 00,F
0082:  GOTO   075
.................... #fuses HS,NOWDT
.................... int outs = 1;  //preset to start process
.................... long delay ;
.................... int prep = 0;
.................... #int_CCP1
.................... TCCP1_isr()
.................... {
....................    CCP_1 = CCP_1 + 44336;      //increment compare counter 8.867238Mhz/4  =  2.2168095 Mhz
*
0031:  MOVLW  30
0032:  ADDWF  15,F
0033:  MOVLW  AD
0034:  BTFSC  03.0
0035:  MOVLW  AE
0036:  ADDWF  16,F
....................  // tijd per puls is 1 / 2216809  = 0,45 microsec  (   44336 * 0,45 microsec = 20 milliseconden
....................    output_bit(PIN_D0, 1);  //output bit to pin
0037:  BSF    08.0
0038:  BSF    03.5
0039:  BCF    08.0
.................... 
....................    if (prep == 1){
003A:  BCF    03.5
003B:  DECFSZ 2A,W
003C:  GOTO   051
....................    for (delay = 0; delay <361; delay++);
003D:  CLRF   29
003E:  CLRF   28
003F:  MOVF   29,W
0040:  SUBLW  01
0041:  BTFSS  03.0
0042:  GOTO   04D
0043:  BTFSS  03.2
0044:  GOTO   049
0045:  MOVF   28,W
0046:  SUBLW  68
0047:  BTFSS  03.0
0048:  GOTO   04D
0049:  INCF   28,F
004A:  BTFSC  03.2
004B:  INCF   29,F
004C:  GOTO   03F
....................     output_bit(PIN_D0,0); 
004D:  BCF    08.0
004E:  BSF    03.5
004F:  BCF    08.0
0050:  BCF    03.5
....................    }
....................    
....................    if (prep == 0){
0051:  MOVF   2A,F
0052:  BTFSS  03.2
0053:  GOTO   065
....................    for (delay = 0; delay <100; delay++);
0054:  CLRF   29
0055:  CLRF   28
0056:  MOVF   29,F
0057:  BTFSS  03.2
0058:  GOTO   061
0059:  MOVF   28,W
005A:  SUBLW  63
005B:  BTFSS  03.0
005C:  GOTO   061
005D:  INCF   28,F
005E:  BTFSC  03.2
005F:  INCF   29,F
0060:  GOTO   056
....................     output_bit(PIN_D0,0);
0061:  BCF    08.0
0062:  BSF    03.5
0063:  BCF    08.0
0064:  BCF    03.5
....................    }
0065:  BCF    0C.2
0066:  BCF    0A.3
0067:  BCF    0A.4
0068:  GOTO   01D
.................... }
.................... 
.................... void prepping();
.................... 
.................... void main()
*
0089:  MOVF   03,W
008A:  ANDLW  1F
008B:  MOVWF  03
008C:  MOVLW  01
008D:  MOVWF  27
008E:  CLRF   2A
008F:  BSF    03.5
0090:  BSF    1F.0
0091:  BSF    1F.1
0092:  BSF    1F.2
0093:  BCF    1F.3
0094:  BCF    03.7
.................... {
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); //timer1 enabled, instruction clock / 1
0095:  MOVLW  85
0096:  BCF    03.5
0097:  MOVWF  10
....................    setup_ccp1(CCP_COMPARE_INT); //set CCP1 to cause an interrupt on match
0098:  MOVLW  0A
0099:  MOVWF  17
....................    enable_interrupts(INT_CCP1);  //unmask Timer2 match interrupt
009A:  BSF    03.5
009B:  BSF    0C.2
....................    enable_interrupts(global);    //enabled all unmasked interrupts
009C:  MOVLW  C0
009D:  BCF    03.5
009E:  IORWF  0B,F
....................    
....................    if(1) prepping();
009F:  GOTO   069
.................... 
.................... }
.................... 
00A0:  SLEEP
.................... void prepping(){
.................... 
.................... prep = 1;
*
0069:  MOVLW  01
006A:  MOVWF  2A
.................... 
.................... delay_ms(600);
006B:  MOVLW  03
006C:  MOVWF  2B
006D:  MOVLW  C8
006E:  MOVWF  2C
*
0083:  DECFSZ 2B,F
0084:  GOTO   06D
.................... 
.................... //void pompmotor_aan();
.................... 
.................... //delay_ms(6000);
.................... 
.................... //void pompmotor_uit();
.................... 
.................... prep = 0;
0085:  CLRF   2A
0086:  BCF    0A.3
0087:  BCF    0A.4
0088:  GOTO   0A0 (RETURN)
.................... 
.................... }
.................... 

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
